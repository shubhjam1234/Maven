## Overview of ISSU

The In Service Software Upgrade (ISSU) pipeline is used to deploy the AOC application (with optional deployments of RBAC, CRDs, and Pre-requisites) and perform a software upgrade as simulated traffic is running. 

The ISSU is configurable with the option of deploying release versions of AOC (22.12, 22.12.01 etc.) as well as custom deployments with application versions that differ from official releases. Testcases are specified via config. Currently Gy traffic tests are generated by the Binaryloader pod using the parameters found in the testcase config file. Parameters such as test run time and TPS are examples of configurable elements. The applications to be upgraded can also be configured as well as their upgrade version.

The [ISSU Test Pipeline](https://sba-jenkins.openet.com/job/ECS/job/AOC-ISSU/job/issu-test/) is where an ISSU test will be executed from and the [ISSU Test Repo](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse) contains all relevant configuration files and scripts.

![ISSU Test Diagram](../images/diagram.png)

### Configuration
There are three configurable elements in an ISSU Test
1. Deploying
2. Upgrading
3. Testcase & Metrics

### Deploying
ISSU Testing uses [MPDK](https://bitbucket.openet.com/projects/AD/repos/openet-aoc-udocs/browse) for deployment. The pipeline can deploy RBAC, CRDs, Pre-requisites and the application itself. 

### Upgrading
After the application has been deployed via MPDK, an upgrade is executed using a user-created testcase [file](./03-creating-a-testcase-file.md). A default [upgrade.sh](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/scripts/upgrade.sh) script exists for a default upgrade, but a custom upgrade script can be created in the ISSU Test repository and specified in the testcase file on a per-chart basis if this default upgrade script is not sufficient

### Testcase & Metrics 
To simulate the application in service, traffic is ran in the test environment. Currently the only traffic type supported by the testcase file is Gy traffic.

# Repository Structure
<img src="../images/repo-structure.png"  width="50%" height="50%">

The ISSU Test repository contains all the configuration necessary to run an In Service Upgrade.

### config
The [config](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config) directory contains two directories: deploymentConfig and testcases.

### config/deploymentConfig
 The [deploymentConfig](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config/deploymentConfig) directory largely contains default/placeholder config aligned with the AOC ISSU EDs for deployment specific config such as namespaces, release names, etc, and the names of credentials in Jenkins for kubernetes cluster. Typically these files will not need to be updated unless a new chart has been added to the AOC deployment, in which case [defaults.yaml](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config/deploymentConfig/defaults.yaml) requires an update, or if cluster credentials in Jenkins are updated then [kube-tokens.yaml](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config/deploymentConfig/kube-tokens.yaml) must be updated.

 ### config/testcases
 The [testcase](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config/testcases) directory contains the config specifying which applications will be upgraded and to what version. There are standard testcase files in this directory which can be used as a reference for creating new testcase files which will be required for any new ISSU test. Instructions can be found [here](./03-creating-a-testcase-file.md)

 ### Jenkins
 The [jenkins](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/jenkins) directory contains the Jenkinsfile which holds the configuration for the ISSU-Test Jenkins job. This is the main orchestration pipeline used to execute the deployment, run the traffic, collect required metics, and perform the upgrade specified in the provided testcase file. Deployment is handled by MPDK jobs which are called downstream. Instructions on running this Jenkins job can be found [here](./05-running-the-test.md)

 ### scripts
 The [scripts](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/scripts) directory contains shell and groovy scripts used during the ISSU test. Custom upgrade scripts used by the ISSU Test job should be added here.
 
 ### scripts/config
 The [config](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/scripts/config) directory contains a groovy script called issu-utils.groovy which has functions that are called by the ISSU Jenkinsfile. Most users will not need to interact with this file but if a new function needs to be added to the Jenkins run the new function should be created in this file.

 ### scripts/metrics
 The [metrics](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/scripts/metrics) directory contains the create_csv.sh script which creates the test report output.


## Creating a testcase file 
## Overview
A testcase file is used to describe the upgrade and traffic generation that will occur during the ISSU run. They should be saved to the [testcases](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config/testcases) directory. There are three section to the file:
1. applicationsToUpgrade
2. traffic
3. metricsConfig

### applicationsToUpgrade

```
applicationsToUpgrade:
  - name: "ecs"
    upgradeScript: "upgrade.sh"
    upgradeVersion: "7.0.1"
  - name: "provisioning"
    upgradeScript: "upgrade.sh"
    upgradeVersion: "4.0.1"

```
The applicationsToUpgrade section is where a user specifies which of their applications will be upgraded and to which version. The helm chart will be pulled from Artifactory so the upgradeVersion must match an available version.

| Value          | Description                                                        | Example   |
|----------------|--------------------------------------------------------------------|-----------|
| name           | Helm release name of the application                               | ecs       |
| upgradeScript  | The script from the base of the scripts/ directory for the upgrade | upgrade.sh|
| upgradeVersion | The version number that will be **upgraded to**                    | 7.0.1     |

### traffic
````
traffic:
  type: "Gy"
  durationInSec: "600"
  activeSessions: "600"
  tps: "10"
  useCase: "basic"

````
The traffic section refers to the config of the Binaryload pod which simulates traffic to the application. The duration and intensity of the traffic are configurable

| Value          | Description                                                         | Example |
|----------------|---------------------------------------------------------------------|---------|
| type           | Type of traffic being generated                                     | Gy      |
| durationInSec  | The duration of the test in seconds                                 | 600     |
| activeSessions | TO BE CLARIFIED                                                     | 600     |
| tps            | Requested Transactions per Second that the test will attempt to make| 1000    |
| usecase        | Traffic use case                                                    | 600     |

### metricsConfig
````
metricsConfig:
  tpsTargetTps: 10
  tpsTolerancePercent: 5
  txnAvgLatUsTargetLatency: 18000
  txnAvgLatUsLatencyTolerancePercent: 5
  txnMaxLatUsMaxLatencyLimitMs: 20000
  msgErrormaxMsgError: 20

````
The metricsConfig section is used for setting up the failure conditions for the test run. If any of the above parameters are not met, run will be marked as a failure and the results will be printed to a CSV file

| Value          | Description                                                                                                               | Example |
|----------------|---------------------------------------------------------------------------------------------------------------------------|---------|
| tpsTargetTolerance                 | The minimum TPS that is acceptable after the test is stable                                           | 10      |
| tpsTolerancePercent                | The percentage (%) difference between the current TPS and target                                      | 5       |
| txnAvgLatUsTargetLatency           | The target **average** latency in microseconds (us) of either the CCRI or CCRT average latency        | 18000   |
| txnAvgLatUsLatencyTolerancePercent | The percentage difference between the current CCRI or CCRT current latency and target average latency | 5       |
| txnMaxLatUsMaxLatencyLimitMs       | The **maximum** latency in microseconds (us) of either the CCRI or CCRT latency                       | 20000   |
| msgErrormaxMsgError                | The number of error messages tolerated                                                                | 20      |


## Deployments
All deployments for ISSU jobs are handled by MPDK. This document serves as a brief overview of MPDK but more in depth documentation can be found [here](https://bitbucket.openet.com/projects/AD/repos/openet-aoc-udocs/browse)

### How ISSU deploys the application
![ISSU Pipeline and downstream pipelines](../images/deployoptions.png)

The ISSU Test pipeline itself does not deploy the application. It instead makes use of four MPDK pipelines that it calls downstream (if the user chooses to deploy them). The ISSU Test pipeline calls these job, passing them the appropriate Kubernetes credentials and they handle the deployment. What is deployed by these downstream pipelines is defined in each of their respective repos. 

The only deployment made by the ISSU Test pipeline itself is the Binaryload pod during the "Run Test" phase.

### Deployment Options
The four deployments that are called downstream are:
1. RBAC 
2. CRDs 
3. Pre-requisites (which includes cert-manager, consul, and UMS)
4. AOC Deployment (4G currently. 5G and 4G Performance are still in progress)

Each deployment is defined by the values files, environment descriptor and token replacer in each of their respective repositories. As there are many different  releases and configurations tht will need ot be switched between for ISSU testing a series of a tagged branches will be available. These tagged branches will contain the correct files and configs for each of the releases (22.12, 22.12.01 etc).

This means if the user wants to deploy an official release, there are already  branches available that can selected in the ISSU Test Jenkins Jobs "Deploy with parameters" page. If a deployment is needed that is not available in these branches, the user can branch off any of the downstream Jobs, make their necessary changes, and then supply the branch name to ISSU Test and they will be deployed.


# Running the Test
## Test Prerequisites
If a branch of an ED has been created (for creating a custom deployment not covered by the tagged releases) a preliminary step is needed before a test can be ran. Execute a "Scan Multibranch Pipeline" for each branched ED (all found [here](https://sba-jenkins.openet.com/job/ECS/job/AOC-ISSU/)). The newly scanned job needs to be ran once to be properly configured. __NOTE: This initial run will fail.__

## Parameters
The job configuration is entered on the "Build with Parameters" option in the [ISSU-Test](https://sba-jenkins.openet.com/job/ECS/job/AOC-ISSU/job/issu-test/) Jenkins Job.     
### Configuration
![Part 1 of Pipeline Parameters](../images/pipeline-parameters-1.png)

The K8S_ENV parameter is the kubernetes cluster where the test will take place. If the cluster for executing this test is not available in this list, this [file](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/config/deploymentConfig/kube-tokens.yaml) needs to be updated and the relevant entry added to the Jenkinsfile [parameters](https://bitbucket.openet.com/projects/AI/repos/issu-test/browse/jenkins/Jenkinsfile.groovy#36) 

The DEPLOYMENT parameter refers to the which version of the application will be deployed. The options are 4G, 5G, and 4G-PERF. Currently 4G is the only option that deploys. Other AOC deployments will be added in the future

AOC_VERSION refers to which release of the application you wish to deploy. The releases are tagged branches of the ED of the chosen DEPLOYMENT. A custom branch can be deployed instead of a tagged release if the branch name is entered into the CUSTOM_BRANCH field. This will instead deploy the branch of the ED. __NOTE: The CUSTOM_BRANCH field will override this field, if provided it will take precedence.__

NAMESPACE_PREFIX is the prefix that will be appended to the application deployment.

## Deployments
![Part 2 of Pipeline Parameters](../images/pipeline-parameters-2.png)

After the run has been configured, the deployments are executed. The four deployment EDs can be chosen to be deployed based on what was specified in either the AOC_VERSION or the CUSTOM_BRANCH. CRDs and PRE_REQUISITES will not be needed in the dev-labs.

RUN_TEST will deploy the binaryload pod and run the traffic as specified in the TESTCASE_CONFIG file. Likewise the UPGRADE option will upgrade the applications as specified in the config file. 

The TEAR_DOWN_DEPLOYMENT option removes the application deployment from the chosen cluster based on the namespace prefix (e.g. if the prefix is specified as FVG-12345 the teardown script will delete all namespaces containing "FVG-12345"). NOTE: Pre-requisites and CRDs will not be torn down by this script for safety. If that is required it should be done manually.

### Post Run
After the run has completed, build artifacts will be available containing stats and metrics for the run. A "results.csv" will be generated which will have overview of the entire run containing the stats from the Binarload.log along with the metricsConfig thresholds to give Pass/Fail for the test. The csv file contains metrics for before, during, and after the upgrade which shows the effect the upgrade will have on a deployment. Other stats and logs are also made available if more detail is needed. 


## Upgrade

The upgrades under the ISSU jobs are handled in two different ways as mentioned below,

1. MPDK upgrade
    1. Tag Version
    2. Custom Branch
2. Script-based upgrades

### Parameters
   We need to enable the upgrade by selecting the 'UPGRADE' checkbox in the 'Build with Parameter'. This will enable the upgrade to be continued based on the method selection under 'UPGRADE_METHOD'. The default upgrade method is MPDK Based upgrade (_update_env_). 

![MPDK Upgrades](../images/upgrades.png)
   

### MPDK Upgrade
   MPDK upgrade is the default upgrade mechanism, which will enable the user to enter the _tag version_ or _custom branch name_ of root ED based on the deployment selection in the 'AOC_UPGRADE_VERSION' text field.
   
   And users are able to select any of the options in the checkbox to upgrade the respective ED's.
   
1. RBAC
2. CRD
3. Prerequisites
4. Application (Based on the deployment selection)
   
### Script Based Upgrade
   Script based upgrade will allow the user to upgrade the specific _Sub-ED_. We can customize the config file to specify the sub-ED details and that can be upgraded. 


## Provisioning Test

Provisioning performance downstream jobs can be executed by enabling the provisioning test check box.

![Provisioning Test](../images/provisioning-test.png)

### Test Configuration

Provisioning performance configurations are stored in a test case yaml file in the below format. We are able to modify the values based on our execution.

```yaml
provisioningPerfTraffic:
  traffic:
    scenario: "provisioning_crud"
    numSubscribers: "5"
    tps: "500"
    numClients: "1"
    durationMax: "600"
  provisioningApi: "CPG"
  concurrentTimerTraffic: "true"
  failureThreshold: "10"
  tpsThreshold: "20"
  latencyThreshold: "200"
  enableJFR: "false"
  cleanVolt: "false"
```
### Jenkins Job

Below Provisioning performance Jenkins job is configured with the default master branch. Later if we need, we can add a new parameter to enter the custom branch.

_ECS/view/SBA-REST-Provisioning-Service/job/SBA-REST-Provisioning-Service/job/provisioning-performance-tests/_




## MPDK overview
Multi-Platform Deployment Kit (MPDK) is a combination of two tools : Setup and Deploy. MPDK Setup is for environment provisioning. MPDK Deploy supports the development and certification of new software releases and provides the tools to create and maintain production environments.

The focus of this documentation is MPDK Deploy and how it is used to create and maintain AOC installations.

Uses of the term MPDK in this documentation refer specifically to MPDK Deploy. MPDK Setup is not covered.


### Background
The various product teams within Amdocs (D1, C1 etc.) were aspiring to have their deployments automated and led the efforts for the same. This led to silo development for each of them and subsequently different experiences for customers onboarding these products.
Thus, the need arose for a unified platform to perform deployment automation in a consistent way i.e. MPDK. 
Today, MPDK forms an important part of the Amdocs Microservices Management Platform

Currently MPDK is used widely within the Amdocs product landscape:
- Digital One - Order handling, Order capture, case, care
- Catalogue one
- R1 - rtb, turbo charging

### Goals/Use cases supported by MPDK
- Automation of CD from development to production
- Provide consistent and unified deployment model across environments
- On demand environment creation
- Declarative environment configuration

### Features
- Kubernetes native - MPDK relies on Helm for provisioning its resources, hence it implicitly supports Kubernetes
- Support for major cloud vendors like AWS, Azure, OCP
- One click environment creation - Environments can be defined as manifests which in turn can be run by automation pipelines.
- Pluggable architecture - can be plugged in existing pipelines by referring as a shared library


